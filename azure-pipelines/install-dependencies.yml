parameters:
  initArgs:

steps:

- task: NuGetAuthenticate@1
  displayName: üîè Authenticate NuGet feeds
  inputs:
    ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
      nuGetServiceConnections: azure-public/msft_consumption # Only necessary for GitHub-hosted repos
    forceReinstallCredentialProvider: true

# Authenticate if we're running on the azure-public account, and not from a fork.
- ${{ if and(eq(variables['system.collectionId'], '63b6279a-d2f1-4bc3-a21c-db7614e92831'),ne(variables['System.PullRequest.IsFork'], 'true')) }}:
  - pwsh: |
      $PAT = '$(System.AccessToken)'
      "npmRegistries:`n  //pkgs.dev.azure.com/azure-public/vside/_packaging/msft_consumption/npm/registry/:`n    npmAuthIdent: devdiv:$PAT`n    npmAlwaysAuth: true" | Tee-Object -FilePath $HOME/.yarnrc.yml
    displayName: üîè Authenticate NPM registry

- task: NodeTool@0
  inputs:
    versionSpec: 18.x
  displayName: ‚öôÔ∏è Install Node.js

- script: corepack enable
  displayName: ‚öôÔ∏è Install yarn

- powershell: |
    $AccessToken = '$(System.AccessToken)' # Avoid specifying the access token directly on the init.ps1 command line to avoid it showing up in errors
    .\init.ps1 -AccessToken $AccessToken ${{ parameters['initArgs'] }} -UpgradePrerequisites -NoNuGetCredProvider
    dotnet --info

    # Print mono version if it is present.
    if (Get-Command mono -ErrorAction SilentlyContinue) {
      mono --version
    }
  displayName: ‚öô Install prerequisites

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: ‚öô Set pipeline variables based on source
  name: SetPipelineVariables
