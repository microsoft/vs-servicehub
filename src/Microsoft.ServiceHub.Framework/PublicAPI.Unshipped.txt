Microsoft.ServiceHub.Framework.IIpcServer
Microsoft.ServiceHub.Framework.IIpcServer.Completion.get -> System.Threading.Tasks.Task!
Microsoft.ServiceHub.Framework.IIpcServer.Name.get -> string!
Microsoft.ServiceHub.Framework.IIpcServer.TraceSource.get -> System.Diagnostics.TraceSource!
Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Completion.get -> System.Threading.Tasks.Task!
Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Dispose() -> void
Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.TraceSource.get -> System.Diagnostics.TraceSource?
Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.TraceSource.init -> void
Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions
Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.ClientOptions() -> void
Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.CpuSpinOverFirstChanceExceptions.get -> bool
Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.CpuSpinOverFirstChanceExceptions.init -> void
Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.FailFast.get -> bool
Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions.FailFast.init -> void
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.AllowMultipleClients.get -> bool
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.AllowMultipleClients.init -> void
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.Name.get -> string?
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.Name.init -> void
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.ServerOptions() -> void
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.TraceSource.get -> System.Diagnostics.TraceSource?
Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions.TraceSource.init -> void
Microsoft.ServiceHub.Framework.ServiceActivationOptions.CultureApplication.CultureApplication() -> void
Microsoft.ServiceHub.Framework.ServiceBrokerClient.Rental<T>.Rental() -> void
Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker
Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.AvailabilityChanged -> System.EventHandler<Microsoft.ServiceHub.Framework.BrokeredServicesChangedEventArgs!>?
Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.Dispose() -> void
Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.GetPipeAsync(Microsoft.ServiceHub.Framework.ServiceMoniker! serviceMoniker, Microsoft.ServiceHub.Framework.ServiceActivationOptions options, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.IO.Pipelines.IDuplexPipe?>
Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.GetProxyAsync<T>(Microsoft.ServiceHub.Framework.ServiceRpcDescriptor! serviceDescriptor, Microsoft.ServiceHub.Framework.ServiceActivationOptions options, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<T?>
Microsoft.ServiceHub.Framework.ServiceHubHostRemoteServiceBroker.ServiceHubHostRemoteServiceBroker(Microsoft.ServiceHub.Framework.IServiceBroker! inner) -> void
static Microsoft.ServiceHub.Framework.ServerFactory.ConnectAsync(string! pipeName, Microsoft.ServiceHub.Framework.ServerFactory.ClientOptions options, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream!>!
static Microsoft.ServiceHub.Framework.ServerFactory.ConnectAsync(string! pipeName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream!>!
static Microsoft.ServiceHub.Framework.ServerFactory.Create(System.Func<System.IO.Stream!, System.Threading.Tasks.Task!>! onConnectedCallback, Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions options = default(Microsoft.ServiceHub.Framework.ServerFactory.ServerOptions)) -> Microsoft.ServiceHub.Framework.IIpcServer!
static Microsoft.ServiceHub.Framework.ServerFactory.CreateAsync(string! pipeName, System.Diagnostics.TraceSource? logger, System.Func<System.IO.Stream!, System.Threading.Tasks.Task!>! onConnectedCallback) -> System.Threading.Tasks.Task<(System.IDisposable! Server, string! ServerName)>!
static Microsoft.ServiceHub.Framework.ServerFactory.PrependPipePrefix(string! leafPipeName) -> string!
virtual Microsoft.ServiceHub.Framework.IpcRelayServiceBroker.Dispose(bool disposing) -> void